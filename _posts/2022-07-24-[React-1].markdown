---
layout: post
title: "React강의 정리"
date: 2022-07-26 19:24:35 +09:00
excerpt: "제대로 해보자 리액트 <br>22.07.26"
cs: true
categories: React
comments: true
---
# 📌 React JS
---------------------------

<figure>
    <a href="/assets/img/react/2022-07-26/react.png"><img src="/assets/img/react/2022-07-26/react.png"></a>    
    <figcaption style="text-align:center">리액트 공부 시작!!</figcaption>
</figure>

<br>
<br>

# React JS
## 왜 써요? 리액트..?
#### React JS는 UI를 interactive하게 만들어준다.
react는 interactive한 웹 사이트를 구현하기 위해 어떤 것이 필요한지 알고 있다.  
때문에 우리는 react를 사용하면서 더욱 쉽게 interactive한 웹 사이트를 구현할 수 있게 된다.  

<br>
<br>

## 리액트 어떻게 쓰는데요?
script를 import해온다.  
리액트와 리액트 돔을 가져오면 된다.
``` javascript
<script src="https://unpkg.com/react@17.0.2/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script>
```

위 코드를 쓰고 난 뒤, 실행시켜서 브라우저 개발자 도구에 "react"를 입력하면 아래와 같이 확인할 수 있다.
<figure>
    <a href="/assets/img/react/2022-07-26/inputReact.jpg"><img src="/assets/img/react/2022-07-26/inputReact.jpg"></a>    
    <figcaption style="text-align:center">react를 콘솔창에 입력한 모습</figcaption>
</figure>

<br>
<br>

## React element 생성하기
\* 현재 배우는 생성 방법은 보편적으로 쉬운 방식이 아님.
그러나 어려운 방식을 통해 리액트에 한 발자국 더 가까워질 수 있음.  

``` javascript
<body>
    <div id="root"></div>
</body>

<script>
    const root = document.getElementById('root');

    // react element 생성
    const span = React.createElement(
        "span", 
        { id: "sexy-span" }, 
        "Hello I'm a span"
    );

    // react DOM을 사용하여 react element를 렌더링한다. 
    ReactDOM.render(span, root);
</script>
```

실제로 개발자는 위와 같은 방식으로 리액트 element를 만들지 않는다.  
(밑에서 더욱 쉬운 방법을 소개할 예정)
그러나 여기서 말하고자 하는 바는 script단에서 HTML를 Update하기 용이하다.  
즉, 유저에게 보여질 내용을 간단하게 컨트롤할 수 있다.

<br>
<br>

## JSX를 사용하여 더욱 똑똑하게 React element 생성하기
JSX는 JavaScript를 확장한 문법으로서 여러 방법으로 활용되지만 특히, React element를 생성할 때 더욱 편리하게 생성할 수 있게 도와준다.  
먼저 JSX로 생성한 요소는 어떻게 생겼는지 살펴보자.  

```javascript
// 어트리뷰트에 따옴표를 이용해 문자열 리터럴을 정의할 수 있습니다.
const aTag = <a href="https://www.reactjs.org"> link </a>;

// 중괄호를 사용하여 어트리뷰트에 JavaScript 표현식을 삽입할 수도 있습니다.
const imgTag = <img src={user.avatarUrl}></img>;

// JSX 태그는 자식을 포함할 수 있습니다.
const divTag = (
  <div>
    <h1>Hello!</h1>
    <h2>Good to see you here.</h2>
  </div>
);
```

위처럼 JSX를 활용하여 element를 표현할 수 있다.  
그럼 단지 element를 저렇게만 쓰면 React element가 되는 걸까?  

**아니다. JSX만 작성한다면 무조건 Syntax Error가 발생한다.**  

<br>
<br>

## Babel를 사용하여 JSX를 React가 이해할 수 있는 형태로 바꿔주기


JSX를 다시 처음 방식의 React element로 변환해주는 작업이 필요하다.  
우리는 **Babel**을 활용하여 이 과정을 해줄 수 있다.  

```javascript
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
```
babel을 import하면 JSX를 우리가 처음 만들었던 형태의 React element로 변환해준다.  
아래 예시 코드를 살펴보자.  
```javascript
<body>
    <div id="root"></div>
</body>

<script type="text/babel">
    const root = document.getElementById('root');
    let counter = 0;

    const onClickEvent = () => {
        counter = counter + 1;
        render();
    };

    const render = () => {
        ReactDOM.render(<Container />, root);
    };

    const Container = () => (
        <div>
            <h3>Total: {counter}</h3>
            <button onClick={onClickEvent}>Click me</button>
        </div>
    );

    render();

</script>
```
위 코드는 버튼을 클릭할 때, counter 변수가 버튼을 카운트하면서  
카운트 수를 실시간으로 표출해주는 예제이다.  

위 코드를 브라우저에서 확인해보면 Header 내부의 마지막 요소로 script가 추가된 것을 확인할 수 있다.  
```javascript
<script>
    "use strict";

    var root = document.getElementById('root');
    var counter = 0;

    var onClickEvent = function onClickEvent() {
    counter = counter + 1;
    render();
    };

    var render = function render() {
    ReactDOM.render( /*#__PURE__*/React.createElement(Container, null), root);
    };

    var Container = function Container() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "Total: ", counter), /*#__PURE__*/React.createElement("button", {
        onClick: onClickEvent
    }, "Click me"));
    };

    render();
</script>
```
이처럼 JSX를 활용하여 React element를 생성하고 babel을 통해 ReactJS가 이해할 수 있는 형태로 변환되는 것을 확인할 수 있다.  

<br>
<br>

## useState

추후 추가




<br>
<br>
<br>

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

