---
layout: post
title: "[MSSQL] 날짜📅 근사값 구하기"
date: 2022-04-16 05:32:40 +0530
excerpt: "입력된 날짜와 가장 근접한 날짜를 구하는 프로시저를 만들어보자 🎨"
database: true
categories: database, MSSQL
comments: true
---

## 입력된 날짜와 가장 근접한 날짜를 구하는 프로시저를 만들어보자 🎨
--------------------------------------------------

<br>

<a href="/assets/img/sql/2022-04-16/calendar.jpg"><img src="/assets/img/sql/2022-04-16/calendar.jpg"></a>

<br>

## 📌 오늘의 주제
-------------------
> Q. 어떤 특별한 날짜들(ex. 우리나라 휴일 날짜 테이블처럼)이 기록된 테이블 A가 있을 때, 사용자가 무작위의 날짜를 입력하면 해당 날짜와 제일 가까운 날짜를 테이블 A에서 찾아내는 업무를 진행해주세요!
  
  
위와 같은 업무를 처리하는 쿼리를 작성하는 방법을 알아보자!


<br>
<br>

## 🗃️ 데이터베이스
---------------------
업무에서 주어진 테이블 A는 아래와 같이 무작위의 날짜 테이블로 존재한다.  
### 테이블 A (2021년의 무작위 날짜가 저장된 테이블)

<figure class="third">
    <a href="/assets/img/sql/2022-04-16/date.jpg"><img src="/assets/img/sql/2022-04-16/date.jpg"></a>    
    <figcaption>'SELECT * FROM A' 의 결과 테이블이다.</figcaption>
</figure>

<br>
<br>

## 📖 해결전략
---------------------
먼저, 근접한 날짜를 구하는 것과 관련된 함수는 존재하지 않는다.  
대신 유사한 기능을 하는 여러 함수를 조합하여 해당 업무를 진행하는 쿼리를 짜면 된다!  

**'제일 가까운 날짜'** 라는 것: 두 날짜의 차가 적은 것을 뜻한다.  
수학에서 두 수의 차는 항상 양수가 나온다. 왜? 두 수의 차이는 상대적인 개념이므로 두 수가 떨어진 거리를 말한거니까.  
그래서 우리는 두 수의 차를 구할 때, 다음과 같은 식을 사용한다.

> **두 수의 차**  
> $$|x - y|$$  
  
SQL에 절대값을 구하는 함수가 있다. 그것은 바로 `ABS()` !!  
5부터 10000까지의 5의 배수 중, 4633과 제일 가까운 값을 구한다고 가정해보자.  
`ABS()`에 비교하고자 하는 두 수를 -연산하여 절댓값을 구해주면 두 수의 차를 알 수 있다.  
이 두 수의 차가 가장 적은 수가 **'제일 가까운 수'** 로 볼 수 있다.  
5부터 10000까지의 5의 배수를 `ABS(4633 - 5)`, `ABS(4633 - 10)`, `ABS(4633 - 15)` ... 이런 식으로 진행한다면  
결과적으로 4633과 4635의 차가 2라는 값으로 가장 작다.  
이러한 원리로 날짜의 차이가 가장 적은 순서대로 정렬한다면, 무작위의 날짜에 대해 제일 가까운 날짜를 찾을 수 있다.  
  
...

근데, 지금까지 작성한 내용은 '수'에 해당될 때 가능한 방법이지, '날짜'의 경우에는 적용할 수 없다.  
그럼 **날짜를 수로 바꾸면 된다!**  
본래, 프로그래밍 언어에서는 Tick값을 지원하겠지만, SQL에는 Tick값이라는 개념이 없더라 ...  
그러므로 직접 날짜를 수로 바꿔주어야 한다. (나만의 Tick값을 만드는 것!)  
날짜를 수로 바꾸는 방법은 `DATEDIFF(DAY, 날짜, 컬럼)`을 사용하여 날짜의 일 수 차이를 Tick으로 사용하겠다.  
대신, 임의의 날짜는 절대적인 기준이 되야하므로 적절한 날짜를 고정시켜둬야 한다! 자세한 것은 아래 업무쿼리에서!!

<br>
<br>

## 🔨 쿼리 작성
---------------
1. 사용자가 무작위 날짜를 입력한다는 가정이 존재하므로, 입력값을 임의로 정의한다.
2. 사용자가 입력한 날짜를 Tick값화 한다. (여기서는 절대적인 비교 날짜를 1900-01-01로 지정했다.)
3. 조회 쿼리문을 작성한다.
4. 테이블 A에 해당하는 모든 날짜를 `DATEDIFF(DAY, 날짜, 컬럼)`를 사용하여 Tick값화 하여 새로운 컬럼을 만든다.
5. 순서를 Tick값의 차이가 적은 순서로 정렬한다.

```sql
-- 1. 사용자가 입력한 날짜
DECLARE @INPUT_DT DATE = '20210612' -- 사용자가 임의로 20210612를 입력했다고 가정하자!

-- 2. 사용자가 입력한 날짜를 Tick화 시킨 값 (44357)
DECLARE @INPUT_TICK INT = DATEDIFF(DAY, '1900-01-01', @INPUT_DT)    

-- 3. 조회 쿼리문 작성 시작!
SELECT DATE_DT,                                       
       TICK_NO =  DATEDIFF(DAY, '1900-01-01', DATE_DT)    -- 4. TICK값을 계산하여 저장한 컬럼 
FROM A
ORDER BY ABS(TICK_NO - @INPUT_TICK)   -- 5. TICK값의 차이가 적은 순서로 정렬

```

<br>
<br>

## ⭐ 결과
--------------
### 사용자가 날짜 '2021-06-12'를 입력했을 때 결과

<figure class="third">
    <a href="/assets/img/sql/2022-04-16/result.jpg"><img src="/assets/img/sql/2022-04-16/result.jpg"></a>
</figure>

위 결과처럼, 날짜 '2021-06-12' 의 Tick값 '44357' 과 가장 가까운 순서대로 정렬된 모습을 볼 수 있다.  
  
  
오늘 이렇게 귀찮음을 이기고 첫 기술 포스팅을 진행해보았다!!  
다음에 더욱 알찬 정보로 찾아뵙겠습니다 여러분!!  
  

<center> - Thank You !! - </center>


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
