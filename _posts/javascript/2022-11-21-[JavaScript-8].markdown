---
layout: post
title: "[모던JS] 원시 값과 객체의 비교"
date: 2022-11-21 02:31:44 +09:00
excerpt: "모던 자바스크립트 Deep Dive<br>2022-11-21"
javascript: true
categories: javascript
tags: javascript
comments: true
---

# 📌 [모던 자바스크립트 13주 뿌시기] 11. 원시 값과 객체의 비교

---

<figure>
    <a href="/assets/img/JavaScript/2022-11-10/bookcover.png"><img src="/assets/img/JavaScript/2022-11-10/bookcover.png"></a>
    <figcaption style="text-align:center"></figcaption>
</figure>

<br>
<br>

# 11. 원시 값과 객체의 비교

원시 타입과 객체 타입으로 구분하는 이유? > 두 타입은 서로 다르기 때문!

원시 타입과 객체 타입의 차이점

1. 원시 타입의 값, 즉 원시 값은 **변경 불가능한 값**. 객체(참조) 타입, 즉 객체는 **변경 가능한 값**.
2. 원시 값을 변수에 할당하면 변수(메모리 공간)에는 **실제 값이 저장**되지만, 객체를 변수에 할당하면 변수(메모리 공간)에는 **참조 값이 저장**됨.
3. 원시 값을 갖는 변수를 다른 변수에 할당할 경우, **원시 값이 복사**되어 전달되지만(값에 의한 전달), 객체를 담은 변수를 다른 변수에 할당하면 원본의 **참조 값이 복사**되어 전달된다(참조에 의한 전달).

### 원시값

##### 변경 불가능한 값

원시 타입의 값은 변경 불가능한 값이다. 변수는 언제든지 값을 바꿀 수 있지만, 물리적인 공간(메모리 공간)에 존재하는 원시 값은 변할 수 없다. 변수가 재할당되는 행위는 변수에 할당된 값이 바뀌는 것이 아니라, 변수가 가리키던 메모리 공간의 주소값이 바뀌는 행위이다.

이러한 원시 값의 불변성은 **데이터의 신뢰성을 보장**한다.

<br>

##### 문자열과 불변성

원시 값을 저장하려면 메모리 공간의 크기를 정해야 하고 이는 원시 타입으로 결정된다. 그러나, 문자열의 경우는 0개 이상의 문자열로 이루어져 있기 때문에 필요한 메모리 공간이 가변적이다.

C언어의 경우는 이러한 이유로 한 문자를 저장하는 데이터 타입 `char`이 존재하지만, 문자열은 존재하지 않는다.

그러나 자바스크립트는 개발자의 편의를 위해 원시 타입 문자열을 제공한다.

문자열은 **유사 배열 객체이면서 이터러블**이므로 배열과 유사하게 각 문자에 대해 접근할 수 있다.

<br>

##### 값에 의한 전달

변수에 원시 값을 갖는 변수를 할당하면 할당받는 변수에 할당되는 변수의 **원시 값이 복사되어 전달**되는 것을 **값에 의한 전달**이라 한다.
이 경우, 같은 값을 보는 두 변수가 같은 주소를 가리키는 것이 아닌, 하나의 원시 값을 복사하여 다른 변수에 할당된다.

사실, 엄밀히 표현하면 변수에는 값이 전달되는 것이 아닌, 메모리 주소가 전달된다. 이는 변수와 같은 식별자는 값이 아니라 메모리 주소를 기억하고 있기 때문.

그러나 값에 의한 전달이라고도 부를 수 있는 이유는 전달된 주소를 통해 메모리 공간에 접근하여 값을 참조할 수 있기 때문이다.

```javascript
let temp1 = 1;
let temp2 = bar;

console.log(temp1, temp2); // 1, 1
console.log(temp1 === temp2); // true

temp2 = 10;

console.log(temp1, temp2); // 1, 10
console.log(temp1 === temp2); // false
```

결국 두 변수의 원시 값은 서로 다른 메모리 공간에 저장된 별개의 값이 되어 어느 한쪽에서 재할당을 통해 값을 변경하더라도 간섭할 수가 없다.

<br>

### 객체

-   객체는 프로퍼티의 개수가 정해져있지 않고 동적으로 추가/삭제 될 수 있다.
-   프로퍼티 값에 대한 제약도 없기 때문에 **메모리 공간의 크기를 데이터 타입과 같은 형태로 미리 정할 수 없다.**
-   객체는 복합적인 자로구조이기 때문에 원시 값에 비해 메모리 소모가 많고 크기가 클 수 있다. 그러므로 **객체와 원시 값은 다른 방식으로 동작하도록 설계되어 있다.**
-   자바스크립트 객체는 **히든 클래스** 방식을 사용하여 C++ 객체 프로퍼티에 접근하는 정도의 성능을 보장한다. 이는 자바와 같은 클래스와 유사하게 동작한다.

<br>

##### 변경 가능한 값

객체는 변경 가능한 값이다.
객체를 할당한 변수에 물리적으로 접근하게 되면 **참조 값**에 접근할 수 있다. 참조 값은 생성된 객체가 저장된 메모리 공간의 주소 그 자체이다.

객체는 변경 가능한 값이기 때문에 **객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다.** 재할당 없이 프로퍼티를 동적으로 추가하거나 값을 갱신할 수 있으며 삭제할 수도 있다.
재할당을 하는 것이 아니므로 객체를 할당한 변수의 참조 값은 변경되지 않는다.

객체는 메모리의 효율적 소비가 어렵고 성능이 나빠진다. 그러므로 변경 가능한 값으로 설계되어 있다. 이러한 구조로 **여러 개의 식별자가 하나의 객체를 공유하는 현상이 발생할 수 있다.**

<br>

##### 참조에 의한 전달

객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달되는 것이 **참조에 의한 전달**이다.

```javascript
// 객체를 가리키는 변수
let temp1 = {
    num: 1,
};

let temp2 = temp1; // 다른 변수에 할당

console.log(temp1.num, temp2.num); // 1, 1
console.log(temp1 === temp2); // true

temp1.num = 2;

console.log(temp1.num, temp2.num); // 2, 2
console.log(temp1 === temp2); // true
```

위의 예시에서 `temp1`의 객체 프로퍼티 값을 바꿨지만, `temp2`의 값도 동일한 값으로 변한 것을 확인할 수 있다. `temp1`과 `temp2`는 하나의 객체를 공유했다.

**값에 의한 전달**이나 **참조에 의한 전달**은 식별자가 기억하는 메모리 공간에 저장되어 있는 값을 복사해서 전달한다는 면에서 동일하다.

때문에 자바스크립트에서는 **값에 의한 전달**만 존재한다고 볼 수 있다.

이러한 부분은 자바스크립트의 공식적인 용어나 개념은 아니기 때문에 완벽하게 해당 개념을 설명하지 못한다.

<br>
<br>
<br>
<br>

### 출처

위키북스, 『모던 자바스크립트 Deep Dive』, 이웅모

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]: https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
