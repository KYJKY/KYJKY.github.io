---
layout: post
title: "[모던JS] 함수"
date: 2022-11-22 21:05:12 +09:00
excerpt: "모던 자바스크립트 Deep Dive<br>2022-11-22"
javascript: true
categories: javascript
tags: javascript
comments: true
---

# 📌 [모던 자바스크립트 13주 뿌시기] 12. 함수

---

<figure>
    <a href="/assets/img/JavaScript/2022-11-10/bookcover.png"><img src="/assets/img/JavaScript/2022-11-10/bookcover.png"></a>
    <figcaption style="text-align:center"></figcaption>
</figure>

<br>
<br>

# 12. 함수

### 함수란?

수학에서 함수: **입력(input)** 을 받아 **출력(output)** 을 내보내는 일련의 과정
프로그래밍 언어에서의 함수: 일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것.

```javascript
// 함수 정의하기
// myFunc: 함수명
// a, b: 매개변수
function myFunc(a, b) {
    // 함수 구현부
    return a + b; // a + b: 반환값
}
// -- 함수 정의 완료 (함수 몸체)

let val1 = 1,
    val2 = 5;
myFunc(val1, val2); // 함수 호출
```

<br>
<br>

### 함수를 왜 사용하는가?

-   함수는 재활용이 가능하다. 동일한 작업을 반복적으로 수행할 일이 생긴다면 함수를 정의하여 재사용하는 것이 합리적이다. 함수는 **코드의 재사용**에 용이하다.
-   코드의 중복을 줄이고 재사용성을 높이는 함수는 **유지보수의 편의성**을 높이고 **코드의 신뢰성**을 높이는 효과가 있다.
-   함수는 객체 타입의 값이므로, 이름을 붙일 수 있다. 함수의 역할을 이름에 잘 녹여낸다면, 어떤 역할을 하는 함수인지 인식할 수 있으므로 내부 코드를 굳이 안봐도 활용할 수 있다. 이는 **코드의 가독성**을 향상시킨다.

<br>
<br>

### 함수 리터럴

함수 리터럴로 함수를 생성하는 방법

```javascript
let func = function add(x, y) {
    return x + y;
};
```

<br>

#### 함수 리터럴의 구성 요소

1. 함수이름
    - 함수 이름은 식별자이므로 네이밍 규칙을 준수해야 한다.
    - 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자다.
    - 함수 이름은 생략할 수 있다. 이름이 있는 함수는 **기명 함수**, 이름이 없는 함수를 **무명/익명 함수**라고 한다.
2. 매개변수 목록
    - 0개 이상의 매개변수를 소괄호로 감싸고 쉼표로 구분한다.
    - 각 매개변수에는 함수를 호출할 때 지정한 인수가 순서대로 할당된다. (순서가 중요하다.)
    - 매개변수는 함수 몸체 내에서 변수와 동일한 취급을 받는다. 변수 = 식별자 = 네이밍 규칙 준수하기
3. 함수 몸체
    - 함수가 호출되었을 때 일괄적으로 실행될 문들을 하나의 실행단위로 정의한 코드 블록이다.
    - 함수 몸체는 함수 호출에 의해 실행된다.

함수도 객체이다. 그러면 일반 객체와 다른점은?
일반 객체는 호출할 수 없지만, 함수는 호출할 수 있다.

<br>
<br>

### 함수 정의

함수를 정의하는 4가지 방법

1. 함수 선언문
2. 함수 표현식
3. `Function` 생성자 함수
4. 화살표 함수(ES6)

<br>

#### 1. 함수 선언문

```javascript
// 함수 선언문
function myFunc(x, y) {
    return x * y;
}

// 함수 참조
console.dir(myFunc);

// 함수 호출
console.log(myFunc(5, 7));
```

함수 선언문은 함수 리터럴과 형태가 동일하지만, 함수 선언문은 함수 이름을 생략할 수 없다.
즉, 위의 예시에서 `myFunc` 자리에는 무조건 이름이 와야한다. (없으면 error)

표현식은 개발자 도구에서 입력할 경우 표현식이 평가되어 출력된다.
그러나 함수 선언문은 표현식이 아닌 문이므로 `undefined`가 출력된다.

<br>

#### 함수 선언문과 함수 리터럴의 차이

원래라면 표현식이 아닌 문은 변수에 할당할 수 없지만, 함수 선언문이 변수에 할당되는 것처럼 보인다.

```javascript
let myFunc = function sum(a, b) {
    return a + b;
};

console.log(myFunc(5, 10));
```

그렇게 보이는 이유: 자바스크립트 엔진이 코드의 문맥에 따라 동일한 함수 리터럴을 **표현식이 아닌 문인 함수 선언문**으로 해석하는 경우와 **표현식인 문인 함수 리터럴 표현식**으로 해석하는 경우가 있기 때문이다.

**즉, 함수 이름이 있는 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석하고, 함수 리터럴이 값으로 평가되어야 하는 문맥이면 함수 리터럴 표현식으로 해석한다.**

```javascript
// 기명 함수 리터럴 > 단독으로 사용할 경우 함수 선언문으로 해석
// 함수 선언문 > 이름 생략 불가능
function foo() {
    console.log("foo");
}
foo();

// 함수 리터럴을 피연산자로 활용 > 함수 리터럴 표현식으로 해석됨
// 함수 리터럴에서는 함수 이름을 생략할 수 있음
(function () {
    console.log("hi");
});
(function bar() {
    console.log("hi");
});

bar(); // Uncaught ReferenceError: bar is not defined
```

<br>

`bar()`에서 에러가 발생하는 이유?

> `bar()`를 선언할 때, 함수 리터럴에서 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자기 때문에 외부에서는 함수 이름으로 함수를 참조할 수 없다. 즉, 함수를 가리키는 식별자가 없다.

<br>

`foo()`에서 정상적으로 호출이 가능한 이유?

> `foo()`는 자바스크립트 엔진이 암묵적으로 생성한 식별자임. 함수 선언문을 사용할 경우, 해당 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 거기에 함수 객체를 할당함.

**즉, 함수는 함수 이름으로 호출하는 것이 아닌 함수 객체를 가리키는 식별자로 호출함!!!**
근데 함수 선언문으로 생성한다면 식별자를 엔진이 암묵적으로 생성하는 것.
리터럴로 변수에 할당할 경우 식별자를 개발자 본인이 변수명으로 생성하는 것.

<br>

#### 2. 함수 표현식

일급 객체: 값의 성질을 갖는 객체. 자바스크립트 함수는 일급 객체이다.

함수 리터럴의 함수 이름은 생략할 수 있고 이를 **익명 함수**라고 한다.
함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다.

함수 표현식 예

```javascript
// 익명 함수 표현식
let add = function (x, y) {
    return x + y;
};
add(1, 5);

// 기명 함수 표현식
let sum = function sum2(x, y) {
    return x + y;
};
sum2(1, 5); // Uncaught ReferenceError: sum2 is not defined
```

함수 표현식에서 함수 이름을 설정한다면, 이 이름은 어차피 함수 몸체 내에서만 참조가 가능하기 때문에
해당 함수 이름이 몸체에서 호출할 일이 없다면 생략하는 것이 당연하다.

<br>

#### 함수 생성 시점과 함수 호이스팅

함수는 선언 방법에 따라 생성 시점이 다르다.

모든 선언문은 런타임 이전에 실행되므로, 함수 선언문은 런타임 이전에 객체가 생성된다.
함수 선언문이 다른 코드보다 미리 실행되는 것처럼 동작하는 자바스크립트의 고유한 특징을 **함수 호이스팅**이라고 한다.

변수 선언은 함수 선언과 유사하게 런타임 이전에 식별자가 생성된다는 점에서 동일하지만, 변수의 경우는 `undefined`로 초기화 되고, 함수 선언문은 함수 객체로 초기화된다.

정리하면,
함수 선언문: 함수 호이스팅 발생(함수 객체 초기화)
함수 표현식: 변수 호이스팅 발생(undefined 초기화)

<br>
<br>

#### 3. Function 생성자 함수

빌트인 함수 Function 생성자 함수는 매개변수 목록과 함수 몸체를 문자열로 전달하면서 new 연산자와 함께 호출하면 함수 객체를 생성하여 반환함.
Function 생성자 함수로 함수를 생성하는 방식은 클로저를 생산하지 않는 등, 다른 방법으로 생성한 함수와 다른 동작을 하기 때문에 **일반적이지 않고 바람직하지 않음.**

<br>
<br>

#### 4. 화살표 함수

function 키워드 대신 화살표 `=>`를 이용하여 함수를 선언할 수 있다. ES6에서 도입되었다.
화살표 함수는 항상 익명 함수로 정의한다.

```javascript
const add = (x, y) => x + y;
console.log(add(2, 5)); // 7
```

화살표는 기존 함수보다 표현과 내부 동작이 간략화되어 있다.

화살표 함수는...

-   생성자 함수로 사용할 수 없다.
-   기존 함수와 this 바인딩 방식이 다르다.
-   prototype 프로퍼티가 없다.
-   arguments 객체를 생성하지 않는다.

<br>
<br>

### 함수 호출

#### 매개변수와 인수

매개변수 `parameter`: 함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 때, 인수를 통해 전달함.

인수는 ...

-   값으로 평가될 수 있는 표현식이어야 함
-   함수를 호출할 때 지정하며, 개수와 타입에 제한이 없다.

매개변수의 특징

-   함수를 정의할 때 선언하며, 함수 몸체 내부에서 변수와 동일하게 취급
-   함수가 호출되면 함수 몸체 내에서 암묵적으로 변수가 생성되고 일반 변수와 마찬가지로 `undefined`로 초기화된 후 인수가 순서대로 할당됨.
-   매개변수는 함수 몸체 내부에서만 참조할 수 있으나 외부에서는 참조할 수 없음
-   매개변수의 스코프(유효 범위)는 함수 내부 뿐.

※ 함수는 매개변수의 개수와 인수의 개수가 일치하는지 체크하지 않으므로 에러가 발생하지 않음. 인수가 부족하여 할당안되면 `undefined`로 초기화 됨

<br>

#### 인수 확인

**인수 타입 확인 예시**

```javascript
function add(x, y) {
    if (typeof x !== "number" || typeof y !== "number")
        throw new TypeError("인수는 모두 숫자여야 합니다.");
}
```

<br>

**단축 평가를 활용하여 매개변수에 기본값을 할당하는 예시**

```javascript
function add(a, b, c) {
    a = a || 0;
    b = b || 0;
    c = c || 0;
    return a + b + c;
}

// ES6 매개변수 기본값 설정 방법
function add(a = 0, b = 0, c = 0) {
    return a + b + c;
}
```

<br>

`arguments`**를 활용하여 파라미터와 인수의 개수 유효성 검사**

```javascript
function add(a, b, c, d) {
    if (arguments.length !== 4) {
        console.log("에러");
    }
    return a + b + c + d;
}

add(1, 2, 3, 4); // 10
add(1, 2, 3); // 에러
```

<br>
<br>

#### 매개변수의 최대 개수와 적절한 함수란?

-   매개변수에는 최대 개수에 대한 명시적인 제한은 없다.
-   매개변수에는 순서에 의미가 있기 때문에 매개변수의 수가 많아진다면 인수의 순서를 고려해야 하므로 유지보수성이 나빠진다.
-   매개변수는 적을수록 좋다. 이상적인 함수는 한 가지 일만 해야 하며 가급적 작게 만들어야 한다.

<br>
<br>

#### 반환문

**반환문의 특징**

-   함수는 `return` 키워드와 표현식(반환값)으로 이뤄진 반환문을 이용하여 함수 외부로 반환할 수 있다.
-   반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다. 반환문 이후의 문은 무시된다.
-   반환문은 `return` 뒤에 오는 표현식을 평가해 반환한다. 지정하지 않는 경우, `undefined`가 반환된다.
-   반환문은 생략 가능하고 생략한다면 `undefined`를 반환한다.
-   반환문은 함수 몸체 내부에서만 사용 가능하다.
-   Node.js 환경에서는 파일별 독립적인 스코프를 가지므로 `return`을 사용하여도 에러가 발생하지 않는다.

<br>
<br>

### 참조에 의한 전달과 외부 상태의 변경

원시 타입 인수는 값 자체가 복사되었으므로 함수 몸체에서 재할당을 하여도 원본 값은 훼손되지 않는다.
객체 타입 인수는 참조가 복사되었으므로 함수 몸체에서 재할당을 하면 기존의 원본이 훼손된다.

객체 타입의 인수를 수정하는 경우, 이를 추적하기 어려우므로 복잡성이 증가하고 가독성이 안 좋아진다.

**객체의 변경을 추적**하기 위해서는 **옵저버 패턴** 등을 통해 객체 참조를 공유하는 모든 이들에게 변경 사실을 통지하고 이에 대처하는 추가 대응이 필요하다.

<br>

**객체를 불변 객체로 만들어 사용하는 것의 특징**

-   객체 타입의 인수를 수정하는 것을 문제점을 해결할 수 있는 방법
-   객체의 복사본을 새롭게 생성하는 비용이 들지만, 원시 값처럼 변경 불가능한 값으로 동작이 가능함.
-   객체의 방어적 복사를 통해 원본 객체를 완전히 복사(깊은 복사)하여 새로운 객체를 생성하고 재할당을 통해 교체함
-   불변 객체로 만드는 것을 통해 함수 몸체에서 객체를 조작하여도 외부 상태가 변경되지 않음.

<br>
<br>

### 다양한 함수의 형태

#### 즉시 실행 함수

함수 정의와 동시에 즉시 호출되는 함수로 단 한 번만 호출되며 다시 호출할 수 없음

```javascript
(function () {
    let a = 3;
    let b = 5;
    return a * b;
})();
```

-   즉시 실행 함수는 익명 함수로 사용하는 것이 일반적이지만 기명 즉시 실행 함수도 사용 가능함.
-   그룹연산자`()` 내의 기명 즉시 실행 함수는 함수 선언문이 아니라 함수 리터럴로 평가되어 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수를 다시 호출할 수가 없다.
-   반드시 그룹 연산자 `()` 로 묶어야 한다. 안 묶는다면 에러 발생. 그룹 연산자로 묶으면서 함수 리터럴을 평가하여 함수 객체를 생성하는 원리이다.
-   그룹 연산자로 안 묶었을 때 에러가 발생하는 이유는 암묵적으로 함수 선언문 뒤에 자동으로 세미콜론을 붙이기 때문.

<br>

**즉시 실행 함수 생성 예시**

```javascript
(function () {
    // ...
}());

(function () {
    // ...
})();

!function () {
    // ...
}();

+function () {
    // ...
}();
```

<br>
<br>

#### 재귀 함수
재귀 호출: 함수가 자기 자신을 호출하는 것
재귀 함수: 재귀 호출을 수행하는 함수

<br>

**재귀 함수로 반복을 구현하는 예시**
```javascript
// 일반 함수
function countdown(n) {
    for (let i = n; i >= 0; i--)
        console.log(i);
}


// 재귀 함수
function countdown(n) {
    if (n < 0)
        return;
    console.log(n);
    countdown(n - 1);
}
```

<br>

- 재귀 함수는 자기 자신을 계속 호출하므로, 도중 루프를 탈출할 수 있는 탈출 조건을 반드시 만들어야 한다. 그렇지 않으면 함수가 무한 호출되어 **스택 오버플로 에러**가 발생한다.
- 재귀 함수를 사용할 때는 반복문을 사용하는 것보다 재귀 함수를 사용하는 편이 더 직관적으로 이해하기 쉬울 경우에만 사용하는 것이 좋다.

<br>
<br>

#### 중첩 함수
외부 함수: 중첩 함수를 포함하는 함수
중첩 함수(내부 함수): 함수 내부에 정의된 함수. 외부 함수의 내부에서만 호출 가능. 중첩 함수는 일반적으로 외부 함수를 돕는 헬퍼 함수의 역할을 함.

- ES6부터 문이 위치할 수 있는 문맥이라면 함수 정의가 가능함
- `if`문이나 `for`문 등에서 함수 선언문을 통해 함수를 정의하는 것은 호이스팅으로 인한 혼란이 발생할 수 있어서 바람직하지 않다.

```javascript
function outer(){
    let x = 1;
    
    // 중첩 함수
    function inner() {
        let y = 2;
        // 외부 함수의 변수를 참조할 수 있다.
        console.log(x + y);
    }

    inner();
}

outer();
```

<br>
<br>

#### 콜백 함수
**콜백 함수**: 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수.
**고차 함수**: 매개변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수.

**콜백 함수의 역할**
콜백 함수는 고차 함수에 전달되어 헬퍼 함수의 역할을 한다. 콜백 함수는 함수 외부에서 고차 함수 내부로 주입하기 때문에 자유롭게 교체할 수 있는 장점이 있다. 고차 함수는 매개변수를 통해 전달받은 콜백 함수의 호출 시점을 결정해서 호출한다. 

한마디로 정리하자면 콜백 함수는 고차 함수로 전달되어서 고차 함수 내부에서 다양하게 활용이 가능하다.


**일반적인 활용**
```javascript
function repeat(n, f){
    for(let i = 0; i < n; i++){
        f(i);
    }
}

// 콜백 함수를 익명 함수 리터럴로 정의하여 전달함
repeat(5, function (i) {
    if (i % 2)
        console.log(i);
});

```

**전달하는 함수가 다른 곳에서도 호출할 필요가 있는 경우**
```javascript
function repeat(n, f){
    for(let i = 0; i < n; i++){
        f(i);
    }
}

function logOdds = function (i) {
    if (i % 2)
        console.log(i);
}

// 함수 참조를 전달함
repeat(5, logOdds);

```





<br>
<br>
<br>
<br>

### 출처

위키북스, 『모던 자바스크립트 Deep Dive』, 이웅모

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]: https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
