---
layout: post
title: "[모던JS] 함수와 일급객체"
date: 2022-12-07 10:12:52 +09:00
excerpt: "모던 자바스크립트 Deep Dive<br>2022-12-07"
javascript: true
categories: javascript
tags: javascript
comments: true
---

# 📌 [모던 자바스크립트 13주 뿌시기] 18. 함수와 일급객체

---

<figure>
    <a href="/assets/img/JavaScript/2022-11-10/bookcover.png"><img src="/assets/img/JavaScript/2022-11-10/bookcover.png"></a>
    <figcaption style="text-align:center"></figcaption>
</figure>

<br>
<br>

# 18. 함수와 일급객체
## 일급 객체
**일급 객체**는 다음과 같은 특징을 가진다.
1. 무명의 리터럴로 생성할 수 있다. 즉 런타임에 생성이 가능하다.
2. 변수나 자료구조(객체, 배열 등)에 저장할 수 있다.
3. 함수의 매개변수에 전달할 수 있다.
4. 함수의 반환값으로 사용할 수 있다.

그리고 자바스크립트 함수는 위 조건을 만족하는 **일급 객체**이다.  

함수가 일급 객체다 == 함수를 객체와 동일하게 사용 가능  
객체 == 값, 함수 == 값과 같이 취급 > 리터럴로 정의 가능  

**함수형 프로그래밍을 가능케 하는 가장 중요한 특징**  
함수를 일반 객체처럼 함수의 매개변수에 전달할 수 있고 반환값으로 `return`할 수 있다.  

**함수 객체와 일반 객체의 차이**  
- 일반 객체는 호출할 수 없지만 함수 객체는 호출할 수 있다.  
- 함수 객체는 일반 객체에는 없는 함수 고유의 프로퍼티를 소유한다.  

## 함수 객체의 프로퍼티
함수는 객체이므로 `console.dir` 메서드를 통해 함수 객체의 내부를 볼 수 있다.

```javascript
function square(number){
    return number * number
}

console.dir(square);
// ***********************
// ƒ square(number)
// arguments: null
// caller: null
// length: 1
// name: "square"
// prototype: {constructor: ƒ}
// [[FunctionLocation]]: VM466:1 
// [[Prototype]]: ƒ ()
// ***********************

console.log(Object.getOwnPropertyDescriptors(square));
// ***********************
// arguments: {value: null, writable: false, enumerable: false, configurable: false}
// caller: {value: null, writable: false, enumerable: false, configurable: false}
// length: {value: 1, writable: false, enumerable: false, configurable: true}
// name: {value: 'square', writable: false, enumerable: false, configurable: true}
// prototype: {value: {…}, writable: true, enumerable: false, configurable: false}
// [[Prototype]]: Object
```

<br>

아래 프로퍼티는 함수 객체의 고유한 데이터 프로퍼티이다.  
`arguments`, `caller`, `length`, `name`, `prototype`  
각 프로퍼티에 대해 알아보자.  

<br>

### arguments 프로퍼티
- `arguments` 객체는 함수를 호출할 때 전달된 인수(arguments)들의 정보를 담고 있는 순회 가능한 유사 배열 객체이다.  
- `arguments`는 함수 내부에서 지역변수처럼 사용된다. 지역변수이므로 외부에서 참조 X.  
- `arguments` 프로퍼티의 값 == `arguments` 객체.  
- `arguments` 프로퍼티는 ES3부터 표준에서 폐지됨. 따라서 함수 내부에서 지역 변수처럼 사용할 수 있는 `arguments` 객체를 참조하여 사용할 것
- 자바스크립트 함수는 매개변수, 인수의 개수 일치여부를 확인X
- 매개변수 수를 초과한 인수는 버려지는 것이 아니라 `arguments` 객체의 프로퍼티로 보관된다.
- `arguments` 객체는 매개변수 개수를 확정할 수 없는 가변 인자 함수를 구현할 때 유용하다.

<br>

### caller 프로퍼티
- `caller`는 ECMAScript 사양에 포함되지 않은 비표준 프로퍼티  
- `caller` 프로퍼티 == 자신을 호출한 함수  
- 자신을 호출한 함수가 없다면 `caller` 프로퍼티는 `null`을 가리킨다.

<br>

### length 프로퍼티
- `length` 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수를 가리킨다.
- `arguments` 객체의 `length` 프로퍼티 == **인자의 개수**
- 함수 객체의 `length` 프로퍼티 == **매개변수의 개수**

<br>

### name 프로퍼티
- 함수 객체의 `name` 프로퍼티는 함수명을 나타낸다.
- ES6부터 정식 표준으로 인정되었다.
- ES5에서 익명함수 표현식의 `name` 프로퍼티는 **빈 문자열을 값으로 가짐**
- ES6에서 익명함수 표현식은 **함수 객체를 가리키는 식별자를 값으로 가짐**
- 함수 객체를 가리키는 식별자는 함수명과 다르다는 것에 유의할 것.

<br>

### \_\_proto\_\_ 접근자 프로퍼티
- `__proto__` 프로퍼티는 `[[Prototype]]` 내부 슬롯이 가리키는 프로포타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티
- 내부 슬롯에는 직접 접근할 수 없고 간접적인 접근 방법을 제공하는 경우에 한하여 접근 가능

<br>

### prototype 프로퍼티
- `prototype` 프로퍼티는 함수가 객체를 생성하는 생성자 함수로 호출될 때 생성자 함수가 생성할 인스턴스의 프로토타입 객체를 가리킴
- `prototype` 프로퍼티는 생성자 함수로 호출할 수 있는 함수 객체, `constructor`만이 소유하는 프로퍼티
- 일반 객체와 생성자 함수로 호출할 수 없는 `non-constructor`에는 `prototype` 프로퍼티가 존재하지 않음

<br>
<br>
<br>
<br>

### 출처

위키북스, 『모던 자바스크립트 Deep Dive』, 이웅모

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]: https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
