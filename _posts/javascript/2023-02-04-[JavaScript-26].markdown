---
layout: post
title: "[모던JS] 34. 이터러블 & 35. 스프레드 문법 & 36. 디스트럭쳐링 할당"
date: 2023-02-04 19:15:23 +09:00
excerpt: "모던 자바스크립트 Deep Dive<br>2023-02-04"
javascript: true
categories: javascript
tags: javascript
comments: true
---

# 📌 [모던 자바스크립트 13주 뿌시기] 34. 이터러블 & 35. 스프레드 문법 & 36. 디스트럭쳐링 할당

---

<figure>
    <a href="/assets/img/JavaScript/2022-11-10/bookcover.png"><img src="/assets/img/JavaScript/2022-11-10/bookcover.png"></a>
    <figcaption style="text-align:center"></figcaption>
</figure>

<br>
<br>

# 34. 이터러블
## 이터레이션 프로토콜
**이터레이션 프로토콜이란?**  
순회 가능한 데이터 컬렉션(자료구조)를 만들기 위해 ECMAScript 사양에 정의하여 미리 약속한 규칙.  

이터레이션 프로토콜에는 **이터러블 프로토콜**과 **이터레이터 프로토콜**이 존재한다.  

**이터러블 프로토콜**  
`Well-known Symbol`인 `Symbol.iterator` 프로퍼티 키로 사용한 메서드를 직접 구현하거나 프로토타입 체인을 통해 상속받은 `Symbol.iterator` 메서드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다. 이러한 규약을 이터러블 프로토콜이라 하며, 이터러블 프로토콜을 준수한 객체를 이터러블이라 한다. 이터러블은 `for...of` 문으로 순회할 수 있으며 스프레드 문법과 배열 디스트럭처링 할당의 대상으로 사용할 수 있다.
 

**이터레이터 프로토콜**  
이터러블의 `Symbol.iterator` 메서드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다. 이터레이터는 `next`메서드를 소유하며 `next` 메서드를 호출하면 이터러블을 순회하며 `value`와 `done` 프로퍼티를 갖는 이터레이터 리절트 객체를 반환한다. 이러한 규약을 이터레이터 프로토콜이라 하며, 이터레이터 프로토콜을 준수한 객체를 이터레이터라 한다. 이터레이터는 이터버블의 요소를 탐색하기 위한 포인터 역할을 한다.

<br>

### 이터러블
**이터러블이란?**  
이터러블 프로토콜을 준수한 객체. `Symbol.iterator`를 프로퍼티 키로 사용한 메서드를 직접 구현하거나 프로토타입 체인을 통해 상속받은 객체이다.  

이터러블의 예시로 배열은 Array.prototype의 Symbol.iterator 메서드를 상속받는 이터러블이다.  

**이터러블의 특징**  
- 이터러블은 `for...of` 문으로 순회 가능하다.
- 이터러블은 스프레드 문법의 대상으로 사용할 수 있다.
- 이터러블은 배열 디스트럭처링 할당의 대상으로 사용할 수 있다.

<br>

### 이터레이터
**이터레이터란?**  
이터레이터 프로토콜을 준수한 객체. 이터러블의 Symbol.iterator 메서드를 호출하면 이터레이터를 반환한다. `Symbol.iterator` 메서드가 반환한 이터레이터는 `next` 메서드를 갖는다.  

**next 메서드의 역할**  
이터러블의 각 요소를 순회하기 위한 포인터 역할을 한다.  
`next` 메서드를 호출할 경우, 이터러블을 순차적으로 한 단계씩 순회하며 순회 결과를 나타내는 이터레이터 리절트 객체(iterator result object)를 반환한다.  

<br>
<br>

## 빌트인 이터러블
자바스크립트는 아래와 같이 이터레이션 프로토콜을 준수한 객체인 빌트인 이터러블을 제공.  

|빌트인 이터러블|Symbol.iterator 메서드|
|---|---|
|Array|Array.prototype[Symbol.iterator]|
|String|String.prototype[Symbol.iterator]|
|Map|Map.prototype[Symbol.iterator]|
|Set|Set.prototype[Symbol.iterator]|
|TypedArray|TypedArray.prototype[Symbol.iterator]|
|arguments|arguments[Symbol.iterator]|
|DOM 컬렉션|NodeList.prototype[Symbol.iterator], HTMLCollection.prototype[Symbol.iterator]|

<br>
<br>

## for ... of 문
사용 용도: 이터러블을 순회하면서 이터러블의 요소를 변수에 할당함.  

**for ... of 문 문법**  
```javascript
// for of
for (변수선언문 of 이터러블) { ... }

// for in
for (변수선언문 in 객체) { ... }
```

**작동 방식**  
- 객체의 프로퍼티 어트리뷰트\[\[Enumerable]]값이 `true`인 프로퍼티를 순회하며 열거한다.
- 프로퍼티 키가 심벌인 프로퍼티는 열거하지 않는다.
- 내부적으로 이터레이터의 `next` 메서드를 호출하여 이터러블을 순회한다.
- `next` 메서드가 만환한 이터레이터 리절트 객체의 value 프로퍼티 값을 변수에 할당한다.  
- `done` 프로퍼티 값이 `false`일 경우 계속 순회하고, `true`일 경우 순회를 중단한다.  

<br>
<br>

## 이터러블과 유사 배열 객체
**유사 배열 객체란?**  
배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 `length` 프로퍼티를 갖는 객체.  

`length`를 가지기 때문에 for문 순회 가능, 인덱스로 프로퍼티 값에 접근 가능.  
그러나, `Symbol.iterator` 메서드가 없기 때문에 `for .. of` 순회가 불가능하다.  

<br>
<br>

## 이터레이션 프로토콜의 필요성
**ES6 이전**  
통일된 규약 없이 각자의 구조를 가지고 다양한 방법으로 순회가 가능했다.  

**ES6 이후**  
이터레이션 프로토콜을 준수하는 이터러블로 통일하여 기준을 일원화 했다.  

**일원화 한 이유?**  
각기 다른 방법으로 순회하는 방법을 각자 만들어 둔다면 데이터 형식에 따라 순회 메소드들이 모든 방법을 지원해야 한다 > 비효율적.  
효율적으로 다양한 데이터 공급자를 사용할 수 있도록 데이터 소비자와 공급자를 연결하는 인터페이스 역할을 하는 것이 이터레이션 프로토콜의 필요성이라 볼 수 있다.  

<br>
<br>

## 사용자 정의 이터러블
### 사용자 정의 이터러블 구현
**일반 객체에서 이터러블을 구현하는 방법**  
이터레이션 프로토콜을 준수하지 않더라도 이터레이션 프로토콜을 준수하도록 구현하면 사용자 정의 이터러블이 된다.  

- `Symbol.iterator` 메서드를 구현한다.
- `Symbol.iterator` 메서드가 `next` 메서드를 갖는 이터레이터를 반환하도록 한다.
- `next` 메서드는 `done`, `value` 프로퍼티를 가지는 이터레이터 리절트 객체를 반환하도록 한다.  

이터레이터를 생성하기 위해서는 `Symbol.iterator` 메서드를 호출해야 하지만 이터러블이면서 이터레이터인 객체를 생성하면 `Symbol.iterator` 메서드를 호출할 필요가 없다.  

**지연 평가**  
데이터가 필요한 시점 이전까지는 미리 데이터를 생성하지 않다가 데이터가 필요한 시점이 되면 데이터를 생성하는 기법.  

<br>
<br>
<br>
<br>

# 35.스프레드 문법
**스프레드 문법이란?**  
하나로 뭉쳐 있는 여러 값들의 집합을 펼쳐서(전개하여, 분산하여, spread) 개별적인 값들의 목록으로 만들 수 있는 문법.  

**스프레드 문법 대상**  
Array, String, Map, Set, argument, DOM컬렉션(NodeList, HTMLCollection)와 같이 for … of 문으로 순회할 수 있는 **이터러블**  

**스프레드를 사용할 수 있는 문맥**  
- 함수 호출문의 인수 목록  
- 배열 리터럴의 요소 목록  
- 객체 리터럴의 프로퍼티 목록  

<br>

## 함수 호출문의 인수 목록에서 사용하는 경우
배열을 펼쳐서 개별적인 값들의 목록으로 만든 후, 이를 함수의 인수 목록으로 전달해야 하는 경우가 있다.  

**\*예시\***  
`Math.max` 메서드는 매개변수 개수를 확정할 수 없는 가변 인자 함수다.
따라서 `Math.max` 메서드에 숫자가 아닌 배열을 인수로 전달하면 최대값을 구할 수 없다.  

```javascript
const arr = [1, 2, 3];
const max = Math.max(arr); // -> NaN
```

이 경우, 배열을 펼쳐서 목록으로 만든 후 인수로 전달해야 한다.  

```javascript
const arr = [1, 2, 3];
const max = Math.max(...arr); // -> 3
```

이처럼 간단하게 배열을 펼쳐서 전달할 수 있다.  

<br>
<br>

## 배열 리터럴 내부에서 사용하는 경우
ES5 방식과 ES6 이후의 방식의 차이

**concat**  
```javascript
// ES5
var arr = [1, 2].concat([3, 4]);
console.log(arr); // [1, 2, 3, 4]

// 스프레드 문법 사용
const arr = [...[1, 2], ...[3, 4]];
console.log(arr); // [1, 2, 3, 4]
```

<br>

**splice**  
```javascript
// ES5
var arr1 = [1, 4];
var arr2 = [2, 3];

arr1.splice(1, 0, arr2);    // [1, [2, 3], 4]

// 스프레드 문법 사용
const arr1 = [1, 4];
const arr2 = [2, 3];

arr1.splice(1, 0, ...arr2);
console.log(arr1); // [1, 2, 3, 4]
```

<br>

**배열 복사**  
```javascript
// ES5
var origin = [1, 2];
var copy = origin.slice(); // [1, 2]
console.log(copy === origin); // false

// 스프레드 문법 사용
const origin = [1, 2];
const copy = [...origin];

console.log(copy); // [1, 2]
console.log(copy === origin); // false
```

<br>

**이터러블을 배열로 변환**  
```javascript
// ES5
function sum() {
  // 이터러블이면서 유사 배열 객체인 arguments를 배열로 변환
  var args = Array.prototype.slice.call(arguments);

  return args.reduce(function (pre, cur) {
    return pre + cur;
  }, 0);
}

console.log(sum(1, 2, 3)); // 6

// 스프레드 문법 사용
function sum() {
  // 이터러블이면서 유사 배열 객체인 arguments를 배열로 변환
  return [...arguments].reduce((pre, cur) => pre + cur, 0);
}
console.log(sum(1, 2, 3)); // 6

// Rest 파라미터를 사용한 구현
const sum = (...args) => args.reduce((pre, cur) => pre + cur, 0);

console.log(sum(1, 2, 3)); // 6
```

<br>
<br>

## 객체 리터럴 내부에서 사용하는 경우
**객체 복사**  
```javascript
// 얕은 복사
const obj = { x: 1, y: 2 };
const copy = { ...obj };
console.log(copy); // { x: 1, y: 2 }
console.log(obj === copy); // false
```

<br>

**객체 병합**  
```javascript
// 프로퍼티가 중복되는 경우, 뒤에 위치한 프로퍼티가 우선권을 갖는다.
const merged = Object.assign({}, { x: 1, y: 2 }, { y: 10, z: 3 });
console.log(merged); // { x: 1, y: 10, z: 3 }

// 스프레드 사용
const merged = { ...{ x: 1, y: 2 }, ...{ y: 10, z: 3 } };
console.log(merged); // { x: 1, y: 10, z: 3 }
```

<br>

**특정 프로퍼티 변경**  
```javascript
const changed = Object.assign({}, { x: 1, y: 2 }, { y: 100 });
console.log(changed); // { x: 1, y: 100 }

// 스프레드 문법 사용
const changed = { ...{ x: 1, y: 2 }, y: 100 };
// changed = { ...{ x: 1, y: 2 }, ...{ y: 100 } }
console.log(changed); // { x: 1, y: 100 }
```

<br>

**프로퍼티 추가**  
```javascript
const added = Object.assign({}, { x: 1, y: 2 }, { z: 0 });
console.log(added); // { x: 1, y: 2, z: 0 }

// 스프레드 문법 사용
const added = { ...{ x: 1, y: 2 }, z: 0 };
// added = { ...{ x: 1, y: 2 }, ...{ z: 0 } }
console.log(added); // { x: 1, y: 2, z: 0 }
```

<br>
<br>
<br>
<br>

# 36. 디스트럭처링 할당
**디스트럭처링 할당이란?**  
구조화된 배열과 같은 이터러블 또는 객체를 `destructuring`(비구조화, 구조파괴)하여 1개 이상의 변수에 개별적으로 할당하는 것.  

**언제 쓰나요?**  
배열과 같은 이터러블 혹은 객체 리터럴에서 필요한 값만 추출하여 변수에 할당할 때 유용하다.  

<br>

## 배열 디스트럭처링 할당
**Q. 구조화된 배열을 전부 변수에 할당하시오**  

```javascript
// ES5 방식
var arr = [1,2,3,4,5];

var one = arr[0];
var two = arr[1];
var three = arr[2];
var four = arr[3];
var five = arr[4];

// ES6 배열 디스트럭처링 할당
const arr = [1,2,3,4,5];

const [one, two, three, four, five] = arr;
```

- 배열 디스트럭처링은 할당의 대상(우변)은 이터러블이어야 한다.  
- 할당 기준은 배열의 인덱스. 그 개수가 동일할 필요는 없다.
- 왼쪽에 값을 할당받을 변수 선언, 우변에는 무조건 이터러블(아니면 에러)
- 선언과 할당을 분리할 수 있지만 가독성이 안 좋으므로 권장하지 않음
- Rest 요소를 사용할 수 있다.

<br>
<br>

## 객체 디스트럭처링 할당
**Q. 객체의 각 프로퍼티를 전부 변수에 할당하시오**  
```javascript
// ES5 방식
var user = { firstName: 'Ungmo', lastName: 'Lee' };

var firstName = user.firstName;
var lastName = user.lastName;

console.log(firstName, lastName);   // Ungmo Lee


// ES6 객체 디스트럭처링 할당
const user = { firstName: 'Ungmo', lastName: 'Lee' };

const { lastName, firstName } = user;

console.log(firstName, lastName); // Ungmo Lee

```

- 객체 디스트럭처링 할당의 대상(우변)은 객체여야 한다.  
- 할당 기준은 프로퍼티 키. 순서는 의미가 없다. 키만 일치하면 됨
- 왼쪽에 프로퍼티 값을 할당받을 변수 선언, 우변에는 무조건 객체로 평가될 수 있는 표현식(아니면 에러)
- 객체 디스트럭처링 할당은 객체를 인수로 전달받는 함수의 매개변수에도 사용 가능
- Rest 요소를 사용할 수 있다.








<br>
<br>
<br>
<br>

### 출처

위키북스, 『모던 자바스크립트 Deep Dive』, 이웅모  
https://www.tutorialstonight.com/js/js-dom-navigation  

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]: https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
